# -*- coding: utf-8 -*-
"""Copy of linear regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17-i82q5-CtIQ5zxIUyH1FXZelyEqr5JI
"""

from google.colab import files
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from IPython.display import display
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn.metrics import r2_score


uploaded = files.upload()
# Get the file name of the uploaded file
file_name = list(uploaded.keys())[0]


#df = pd.read_excel('file.xlsx', parse_dates=['date_time_field'])
# Read the file into a DataFrame
df = pd.read_excel(file_name)
display(df)

import pandas as pd

# Read the file into a DataFrame
try:
    df = pd.read_excel(file_name)
except Exception as e:
    print("Error reading the file:", e)
    exit()

# Check for format issues and drop duplicate rows
df = df.drop_duplicates()

# Check for missing values
missing_values = df.isna().sum()
if missing_values.sum() > 0:
    print("Missing values found in the following columns:")
    print(missing_values)
    # Handle missing values as per your requirement

# Extract the year and month from the datetime values
try:
    df["year"] = df["Date"].dt.year
    df["month"] = df["Date"].dt.month
    df["day"] = df["Date"].dt.day
    df["hour"] = df["Date"].dt.hour
except Exception as e:
    print("Error extracting year, month, day and hour:", e)
    exit()

# Load the data into a pandas DataFrame


# Extract the year and month from the datetime values
df["year"] = df["Date"].dt.year
df["month"] = df["Date"].dt.month
df["day"] = df["Date"].dt.day
df["hour"] = df["Date"].dt.hour

# Drop the datetime column
#df.drop("date", axis=1, inplace=True)

# Extract the input features (X) and the target values (y) from the DataFrame
X = df[["year", "month","day","hour"]]
#y = df["voltage"]
#y = df["current"]
y = df["Hourly energy kWh"]


# Scale the input features using StandardScaler

#Scale the input features using StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
# Train a linear regression model on the data
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model's performance
print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
mse = mean_squared_error(y_test, y_pred)
print('Mean Squared Error:', mse)

# R-Squared
r2 = r2_score(y_test, y_pred)
print('R-Squared:', r2)
from sklearn.metrics import r2_score

r2 = r2_score(y_test, y_pred)
print("Coefficient of Determination:", r2)
# Get the date from the user

year = input("Enter the year: ")
month = input("Enter the month: ")
date=input("Enter the day: ")
time=input("Enter the hour: ")

# Make the prediction
X_new = np.array([[year, month,date,time]])xq2xx
X_new = scaler.transform(X_new)
prediction = model.predict(X_new)[0]
#print("Predicted voltage:", prediction)
print("Predicted hourly Energy:", prediction)

import matplotlib.pyplot as plt

# Plot the actual vs predicted energy
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Energy (kWh)')
plt.ylabel('Predicted Energy (kWh)')
plt.title('Actual vs Predicted Energy')
plt.show()

df.isna().sum() #ye missing values batata

import matplotlib.pyplot as plt

import missingno as msno
msno.bar(df)

from scipy import stats

from sklearn.ensemble import IsolationForest

# define the outlier detection method
clf = IsolationForest(contamination=0.1)

# fit the outlier detection method to the data
clf.fit(X_train, y_train)

# get the outlier predictions
y_pred_outliers = clf.predict(X_test)

#print the outliers
print("Outliers:", y_pred_outliers)

from google.colab import files
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from IPython.display import display
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn.metrics import r2_score


uploaded = files.upload()
# Get the file name of the uploaded file
file_name = list(uploaded.keys())[0]

df = pd.read_excel(file_name)
display(df)
# Check for missing values
missing_values = df.isnull().sum()
if missing_values.sum() > 0:
    print("The following columns have missing values:")
    print(missing_values[missing_values > 0])
else:
    print("No missing values found.")

# Check for inconsistent data types
for col in df.columns:
    if df[col].dtype not in [np.int64, np.float64, np.datetime64, np.bool]:
        print(f"Column '{col}' has inconsistent data types.")

# Check for incorrect values
for col in df.columns:
    if df[col].dtype == np.datetime64:
        incorrect_values = df[df[col].dt.year < 1900]
        if len(incorrect_values) > 0:
            print(f"Column '{col}' has incorrect values:")
            print(incorrect_values)
    if df[col].dtype in [np.int64, np.float64]:
        incorrect_values = df[df[col] < 0]
        if len(incorrect_values) > 0:
            print(f"Column '{col}' has incorrect values:")
            print(incorrect_values)